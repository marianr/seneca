
2012-12-14:
- prepend 'seneca-' to plugins names if they cannot be found verbatim - reduces verbosity of references to standard plugins:
  si.use( require('seneca-user') ) becomes si.use( require('user') ) 
- search for plugin modules in calling code require paths, again to reduce verbosity. Uses module.parent filename and path properties
  inside seneca module:
  si.use( require('user') ) becomes si.use( 'user' )  works, even though seneca-user is npm installed into the calling code folder, not seneca's own folder

  search algo is now: name, seneca-name, calling-file-folder/name, calling-file-folder/seneca-name, 
                      calling-file-folder/node_modules/name, calling-file-folder/node_modules/seneca-name, ... etc up the parent folders


2012-12-15:
- seneca.util contains utility functions
- seneca.util.deepextend - like _.extend, except overrides apply inside objects, see test/seneca.util.test.js for example
- being migration to mocha, dropping expresso, for unit tests



2013-01-09:
- logging stuff goes in lib/logging.js
- makelogrouter creates log routing - enables filtering of logs
- test/logging.test.js runs under mocha
- moved test/*.text.js to all run under mocha


2013-01-11
- fixed router bugs

2013-01-14
- updated store tests to use mocha
- updated transport plugin

2013-02-01
- list of refactorings for stores:
  - canon - unique desc of zone/base/name/instanceid for each store instance, gen'd by Store

2013-02-06
- plugins now defined only by init function(seneca,opts,cb) - objects no longer supported
- updated some plugins to this new structure
- updated top level tests

2013-02-08
- really need to get rid of common.js, esp preloading of modules - silly

2013-02-12
- text db store as example for external store plugin reference standard test
- cleanup for 0.5.0 release


NEXT
- seneca-verify repo to test github masters of plugins against lastest version

